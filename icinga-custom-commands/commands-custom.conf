object CheckCommand "check_gmodem2" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_gmodem2" ]
    arguments = {
        "-H" = {
            value = "$gmodem2_host$"
            required = true
        }
        "--rx-power-warning" = "$gmodem2_rx_warning$"
        "--rx-power-critical" = "$gmodem2_rx_critical$"
        "-v" = {
            set_if = "$gmodem2_verbose$"
        }
    }
    vars.gmodem2_host = "$address$"
}

object CheckCommand "check_p110" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_p110" ]
    arguments = {
        "-H" = {
            value = "$p110_host$"
            required = true
        }
        "-u" = {
            value = "$p110_email$"
            required = true
        }
        "-p" = {
            value = "$p110_password$"
            required = true
        }
        "-t" = "$p110_timeout$"
        "--expect-on" = {
            set_if = "$p110_expect_on$"
        }
        "--expect-off" = {
            set_if = "$p110_expect_off$"
        }
        "--power-warning" = "$p110_power_warning$"
        "--power-critical" = "$p110_power_critical$"
        "--signal-warning" = "$p110_signal_warning$"
        "--signal-critical" = "$p110_signal_critical$"
        "--expect-power-protection" = "$p110_expect_power_protection$"
        "--expect-overcurrent" = "$p110_expect_overcurrent$"
        "--expect-charging" = "$p110_expect_charging$"
        "-v" = {
            set_if = "$p110_verbose$"
        }
    }
    vars.p110_host = "$address$"
}

object CheckCommand "check_compose" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_compose" ]
    arguments = {
        "-p" = "$compose_project$"
        "-f" = "$compose_file$"
        "-d" = "$compose_dir$"
        "--show-services" = {
            set_if = "$compose_show_services$"
        }
        "--unhealthy-warning" = {
            set_if = "$compose_unhealthy_warning$"
        }
        "--ignore-services" = "$compose_ignore_services$"
    }
}

object CheckCommand "check_eap772" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_eap772" ]
    arguments = {
        "-H" = {
            value = "$eap772_host$"
            required = true
        }
        "-u" = {
            value = "$eap772_user$"
            required = true
        }
        "-p" = {
            value = "$eap772_password$"
            required = true
        }
        "--show-interfaces" = {
            set_if = "$eap772_show_interfaces$"
        }
        "--error-threshold" = "$eap772_error_threshold$"
        "--ignore-errors" = {
            set_if = "$eap772_ignore_errors$"
        }
        "--ignore-down" = {
            set_if = "$eap772_ignore_down$"
        }
        "-i" = "$eap772_interfaces$"
    }
    vars.eap772_host = "$address$"
}

object CheckCommand "check_jetdirect" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_jetdirect" ]
    arguments = {
        "-H" = {
            value = "$jetdirect_host$"
            required = true
        }
        "-t" = {
            value = "$jetdirect_type$"
            required = true
        }
        "-o" = "$jetdirect_object$"
        "-w" = "$jetdirect_warning$"
        "-c" = "$jetdirect_critical$"
    }
    vars.jetdirect_host = "$address$"
}

object CheckCommand "check_goss" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_goss" ]
    arguments = {
        "-g" = "$goss_file$"
        "--vars" = "$goss_vars$"
        "--show-failures" = {
            set_if = "$goss_show_failures$"
        }
    }
}

object CheckCommand "check_kindle" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_kindle" ]
    arguments = {
        "-u" = {
            value = "$kindle_api_url$"
            required = true
        }
        "-s" = {
            value = "$kindle_serial$"
            required = true
        }
        "--battery-warning" = "$kindle_battery_warning$"
        "--battery-critical" = "$kindle_battery_critical$"
        "--offline-hours" = "$kindle_offline_hours$"
        "--timeout" = "$kindle_timeout$"
        "--insecure" = {
            set_if = "$kindle_insecure$"
        }
        "--test-connection" = {
            set_if = "$kindle_test_connection$"
        }
        "--show-details" = {
            set_if = "$kindle_show_details$"
        }
        "-v" = {
            set_if = "$kindle_verbose$"
        }
    }
}

object CheckCommand "check_smart" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_smart" ]
    arguments = {
        "-d" = "$smart_device$"
        "-g" = "$smart_global_pattern$"
        "-i" = {
            value = "$smart_interface$"
            required = true
        }
        "-b" = "$smart_bad_threshold$"
        "-e" = "$smart_exclude$"
        "-E" = "$smart_exclude_all$"
        "-r" = "$smart_raw_list$"
        "-w" = "$smart_warn_list$"
        "-s" = {
            set_if = "$smart_selftest$"
        }
        "-l" = {
            set_if = "$smart_ssd_lifetime$"
        }
        "-O" = {
            set_if = "$smart_oldage$"
        }
        "-q" = {
            set_if = "$smart_quiet$"
        }
        "--skip-self-assessment" = {
            set_if = "$smart_skip_self_assessment$"
        }
        "--skip-temp-check" = {
            set_if = "$smart_skip_temp_check$"
        }
        "--skip-load-cycles" = {
            set_if = "$smart_skip_load_cycles$"
        }
        "--skip-error-log" = {
            set_if = "$smart_skip_error_log$"
        }
        "--hide-sn" = {
            set_if = "$smart_hide_sn$"
        }
        "--debug" = {
            set_if = "$smart_debug$"
        }
    }
}

object CheckCommand "check_lm_sensors" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_lm_sensors" ]
    arguments = {
        "--high" = {
            value = "$lm_sensors_high$"
            repeat_key = true
        }
        "--low" = {
            value = "$lm_sensors_low$"
            repeat_key = true
        }
        "--range" = {
            value = "$lm_sensors_range$"
            repeat_key = true
        }
        "--check" = {
            value = "$lm_sensors_check$"
            repeat_key = true
        }
        "--rename" = {
            value = "$lm_sensors_rename$"
            repeat_key = true
        }
        "--sanitize" = {
            set_if = "$lm_sensors_sanitize$"
        }
        "--nosensors" = {
            set_if = "$lm_sensors_nosensors$"
        }
        "--nodrives" = {
            set_if = "$lm_sensors_nodrives$"
        }
        "--drives" = {
            set_if = "$lm_sensors_drives$"
        }
        "--hddtemp_bin" = "$lm_sensors_hddtemp_bin$"
        "--sensors_bin" = "$lm_sensors_sensors_bin$"
        "--list" = {
            set_if = "$lm_sensors_list$"
        }
        "-v" = {
            set_if = "$lm_sensors_verbose$"
        }
    }
}

object CheckCommand "check_space_usage" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_space_usage" ]
    arguments = {
        "-p" = {
            value = "$space_usage_path$"
        }
        "-d" = {
            value = "$space_usage_depth$"
        }
        "-t" = {
            value = "$space_usage_top$"
        }
        "-w" = {
            value = "$space_usage_warning$"
        }
        "-c" = {
            value = "$space_usage_critical$"
        }
        "-e" = {
            value = "$space_usage_exclude$"
            repeat_key = true
        }
        value = "$space_usage_exclude$"
            repeat_key = true
        }
        "--show-details" = {
            set_if = "$space_usage_show_details$"
        }
        "-v" = {
            set_if = "$space_usage_verbose$"
        }
    }
    vars.space_usage_path = "/"
    vars.space_usage_depth = 2
    vars.space_usage_top = 10
}

object CheckCommand "check_lpr" {
    import "plugin-check-command"
    command = [ "/opt/nagios-plugins-lukas/check_lpr" ]
    arguments = {
        "-H" = {
            value = "$lpr_host$"
            required = true
        }
        "-p" = "$lpr_port$"
        "-s" = "$lpr_source_port$"
        "-q" = "$lpr_queue$"
        "-t" = "$lpr_timeout$"
        "-v" = {
            set_if = "$lpr_verbose$"
        }
    }
    vars.lpr_host = "$address$"
    vars.lpr_port = 515
    vars.lpr_source_port = 730
    vars.lpr_queue = "pr2"
}